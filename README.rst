Fixing up gmsh export files for CalculiX
########################################

:date: 2024-02-04
:tags: gmsh, calculix
:author: Roland Smith

.. Last modified: 2024-02-04T21:45:40+0100

Introduction
------------

Although I like the CalculiX_ FEA program very much, the built-in geometry
generation and meshing module has some limitations. For example, it cannot
easily generate geometry with holes.

Therefore I sometimes like to use gmsh_ to generate geometry (or import it
from STEP files) and meshes, which I then export in CalculiX INP format.
In gmsh, I define physical groups for e.g. fixations, symmetry constraints and
(distributed) loads.

.. _Calculix: http://www.calculix.de/
.. _gmsh: http://gmsh.info/

However, that has some issues as well. When exporting, gmsh saves both the
surface mesh and the volume mesh. And it uses the surface mash for physical
surfaces. This is not useful for volume meshes, because we want the physical
surface to refer to sides of the solid elements.

So I wrote ``gmsh-inp-filter.py`` to address this problem.
It filters the Abaqus input file generated by gmsh to only contain node sets,
solid elements and solid element surface sets.

Additionally, for adjacent volumes it can make separate nodes in the interface
layer for each volume, and uses ``*EQUATION`` to connect them.
This prevents nodal averaging of stresses over different volumes and
potentially different materials. This is activated by the ``-e`` (or
``--equations``) option.


Prequisites
-----------

You will need Python version 3.6 or later to run this script.

The following options should be set in the geo-file for gmsh to generate
output that this program can handle::

    Mesh.ElementOrder = 2; // Create second order elements.
    Mesh.SecondOrderIncomplete = 1;
    Mesh.Format = 39; // Save mesh as INP format.
    Mesh.SaveGroupsOfNodes = 1;
    Mesh.SaveGroupsOfElements = 1;

This will create second order tetrahedron elements (C3D10 in CalculiX)

If you want to generate hex elements (C3D20 in CalculiX), have the following
options set in your geo-file::

    Mesh.SubdivisionAlgorithm = 2; // All hex elements
    Mesh.Algorithm = 8;  // Frontal Delauney for quads.
    Mesh.Algorithm3D = 1; // Delauney

You should also set ``Mesh.CharacteristicLengthMin`` and
``Mesh.CharacteristicLengthMax`` to sensible values in the geo-file, so that
your geo-file generates a reproducible mesh.


Installation
------------

To install it for the local user, run::

    python setup.py install

This will install it in the user path for Python scripts.
For POSIX operating systems this is ususally ``~/.local/bin``.
For ms-windows this is the ``Scripts`` directory of your Python installation
or another local directory.
Make sure that this directory is in your ``$PATH`` environment variable.


Usage
-----

Consider the following geo-file, ``beam.geo``::

    SetFactory("OpenCASCADE");

    // Beam parameters. All dimensions in SI units.
    W = 40/1000;
    H = 70/1000;
    t = 4/1000;
    L = 0.8;

    // Create beam
    Rectangle(1) = {0,0,0, W, H};
    Rectangle(2) = {t,t,0, W-2*t,H-2*t};
    BooleanDifference{Surface{1}; Delete;}{Surface{2}; Delete;} // Result is surface 1
    Extrude {0,0,L}{Surface{1};}
    Physical Volume("beam") = {1};
    Physical Surface("fix") = {1};
    Physical Surface("load") = {10};
    // Rigid body node.
    Point(41) = {W/2,H/2,L};
    Physical Point("rigid") = {41};

    Mesh.CharacteristicLengthMin = 0.001;
    Mesh.CharacteristicLengthMax = 0.02;
    Mesh.Algorithm = 8;  // Frontal Delauney for quads.
    Mesh.Algorithm3D = 1; // Delauney
    Mesh.ElementOrder = 2; // Create second order elements.
    Mesh.SubdivisionAlgorithm = 2; // All hex elements
    Mesh.SecondOrderIncomplete = 1; // Use 20-node hex elements.
    Mesh.Format = 39; // Save mesh as INP format.
    Mesh.SaveGroupsOfNodes = 1;
    Mesh.Optimize = 1;

    // Create mesh
    Mesh 3;
    Coherence Mesh;
    Save "beam-mesh.inp";

Run ``gmsh`` as follows::

    gmsh beam.geo -

This creates the file ``beam-mesh.inp``.
Looking through that for section headers::

    > grep '^\*' balk-mesh.inp
    *Heading
    *NODE
    ******* E L E M E N T S *************
    *ELEMENT, type=CPS8, ELSET=Surface1
    *ELEMENT, type=CPS8, ELSET=Surface10
    *ELEMENT, type=C3D20, ELSET=Volume1
    *ELSET,ELSET=fix
    *ELSET,ELSET=load
    *ELSET,ELSET=beam
    *NSET,NSET=rigid
    *NSET,NSET=fix
    *NSET,NSET=load
    *NSET,NSET=beam


We can now call ``gmsh-inp-filter``::

    python3 gmsh-inp-filter.py -r beam-mesh.inp all.msh

Finding the section header in the resulting file::

    > grep '^\*' all.msh
    *NODE, NSET=Nall
    *ELEMENT, TYPE=C3D20R, ELSET=Eall
    *NSET, NSET=Nrigid
    *NSET, NSET=Nfix
    *NSET, NSET=Nload
    *NSET, NSET=Nbeam
    *ELSET, ELSET=Ebeam
    *SURFACE, NAME=Sfix
    *SURFACE, NAME=Sload

All the elements are defined as part as a single element set ``Eall``.
Element sets are created for all the defined physical volumes.
The surface elements have been replaced by ``SURFACE`` keywords, which
represent all the defined physical surfaces in the geo-file.

Additionally, the node and element sets have been renamed with the
names of the physical entities as defined in the geo-file.
